"""
    INCAS TA2-UIUC Datatypes

    This API document is defined based on INCAS Common Datatypes version 0.0.3.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from uiuc_incas_client.api_client import ApiClient, Endpoint as _Endpoint
from uiuc_incas_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from uiuc_incas_client.model.actor import Actor
from uiuc_incas_client.model.actor_enrichment import ActorEnrichment
from uiuc_incas_client.model.actor_enrichment_meta import ActorEnrichmentMeta


class ActorApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.actor_enrichments_get_endpoint = _Endpoint(
            settings={
                'response_type': (ActorEnrichmentMeta,),
                'auth': [],
                'endpoint_path': '/actor/enrichments',
                'operation_id': 'actor_enrichments_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'enrichment_name',
                    'provider_name',
                    'version',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'enrichment_name',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('enrichment_name',): {

                        "CATEGORY": "category",
                        "NUMERIC": "numeric",
                        "ARRAY": "array",
                        "TEXT": "text"
                    },
                },
                'openapi_types': {
                    'enrichment_name':
                        (str,),
                    'provider_name':
                        (str,),
                    'version':
                        (str,),
                },
                'attribute_map': {
                    'enrichment_name': 'enrichmentName',
                    'provider_name': 'providerName',
                    'version': 'version',
                },
                'location_map': {
                    'enrichment_name': 'query',
                    'provider_name': 'query',
                    'version': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.actor_enrichments_post_endpoint = _Endpoint(
            settings={
                'response_type': (ActorEnrichmentMeta,),
                'auth': [],
                'endpoint_path': '/actor/enrichments',
                'operation_id': 'actor_enrichments_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'actor_enrichment_meta',
                ],
                'required': [
                    'actor_enrichment_meta',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'actor_enrichment_meta':
                        ([ActorEnrichmentMeta],),
                },
                'attribute_map': {
                },
                'location_map': {
                    'actor_enrichment_meta': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.actor_enrichments_put_endpoint = _Endpoint(
            settings={
                'response_type': (ActorEnrichmentMeta,),
                'auth': [],
                'endpoint_path': '/actor/enrichments',
                'operation_id': 'actor_enrichments_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'actor_enrichment_meta',
                    'enrichment_name',
                    'provider_name',
                    'version',
                ],
                'required': [
                    'actor_enrichment_meta',
                ],
                'nullable': [
                ],
                'enum': [
                    'enrichment_name',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('enrichment_name',): {

                        "CATEGORY": "category",
                        "NUMERIC": "numeric",
                        "ARRAY": "array",
                        "TEXT": "text"
                    },
                },
                'openapi_types': {
                    'actor_enrichment_meta':
                        ([ActorEnrichmentMeta],),
                    'enrichment_name':
                        (str,),
                    'provider_name':
                        (str,),
                    'version':
                        (str,),
                },
                'attribute_map': {
                    'enrichment_name': 'enrichmentName',
                    'provider_name': 'providerName',
                    'version': 'version',
                },
                'location_map': {
                    'actor_enrichment_meta': 'body',
                    'enrichment_name': 'query',
                    'provider_name': 'query',
                    'version': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.actor_id_enrichments_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/actor/{id}/enrichments',
                'operation_id': 'actor_id_enrichments_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'enrichment_name',
                    'provider_name',
                    'version',
                ],
                'required': [
                    'id',
                    'enrichment_name',
                    'provider_name',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                    'enrichment_name',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('enrichment_name',): {

                        "CATEGORY": "category",
                        "NUMERIC": "numeric",
                        "ARRAY": "array",
                        "TEXT": "text"
                    },
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'enrichment_name':
                        (str,),
                    'provider_name':
                        (str,),
                    'version':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'enrichment_name': 'enrichmentName',
                    'provider_name': 'providerName',
                    'version': 'version',
                },
                'location_map': {
                    'id': 'path',
                    'enrichment_name': 'query',
                    'provider_name': 'query',
                    'version': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.actor_id_enrichments_get_endpoint = _Endpoint(
            settings={
                'response_type': ([ActorEnrichment],),
                'auth': [],
                'endpoint_path': '/actor/{id}/enrichments',
                'operation_id': 'actor_id_enrichments_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'enrichment_name',
                    'provider_name',
                    'version',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'enrichment_name',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('enrichment_name',): {

                        "CATEGORY": "category",
                        "NUMERIC": "numeric",
                        "ARRAY": "array",
                        "TEXT": "text"
                    },
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'enrichment_name':
                        (str,),
                    'provider_name':
                        (str,),
                    'version':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'enrichment_name': 'enrichmentName',
                    'provider_name': 'providerName',
                    'version': 'version',
                },
                'location_map': {
                    'id': 'path',
                    'enrichment_name': 'query',
                    'provider_name': 'query',
                    'version': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.actor_id_enrichments_post_endpoint = _Endpoint(
            settings={
                'response_type': ([ActorEnrichment],),
                'auth': [],
                'endpoint_path': '/actor/{id}/enrichments',
                'operation_id': 'actor_id_enrichments_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'actor_enrichment',
                ],
                'required': [
                    'id',
                    'actor_enrichment',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'actor_enrichment':
                        ([ActorEnrichment],),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                    'actor_enrichment': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.actor_id_enrichments_put_endpoint = _Endpoint(
            settings={
                'response_type': ([ActorEnrichment],),
                'auth': [],
                'endpoint_path': '/actor/{id}/enrichments',
                'operation_id': 'actor_id_enrichments_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'enrichment_name',
                    'provider_name',
                    'version',
                    'actor_enrichment',
                ],
                'required': [
                    'id',
                    'enrichment_name',
                    'provider_name',
                    'version',
                    'actor_enrichment',
                ],
                'nullable': [
                ],
                'enum': [
                    'enrichment_name',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('enrichment_name',): {

                        "CATEGORY": "category",
                        "NUMERIC": "numeric",
                        "ARRAY": "array",
                        "TEXT": "text"
                    },
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'enrichment_name':
                        (str,),
                    'provider_name':
                        (str,),
                    'version':
                        (str,),
                    'actor_enrichment':
                        ([ActorEnrichment],),
                },
                'attribute_map': {
                    'id': 'id',
                    'enrichment_name': 'enrichmentName',
                    'provider_name': 'providerName',
                    'version': 'version',
                },
                'location_map': {
                    'id': 'path',
                    'enrichment_name': 'query',
                    'provider_name': 'query',
                    'version': 'query',
                    'actor_enrichment': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.actor_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (Actor,),
                'auth': [],
                'endpoint_path': '/actor/{id}',
                'operation_id': 'actor_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def actor_enrichments_get(
        self,
        **kwargs
    ):
        """actor_enrichments_get  # noqa: E501

        Returns current actor enrichment meta by providerName, enrichmentName and version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.actor_enrichments_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            enrichment_name (str): [optional]
            provider_name (str): [optional]
            version (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ActorEnrichmentMeta
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.actor_enrichments_get_endpoint.call_with_http_info(**kwargs)

    def actor_enrichments_post(
        self,
        actor_enrichment_meta,
        **kwargs
    ):
        """actor_enrichments_post  # noqa: E501

        Creates actor enrichment meta (post after all actors have been added)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.actor_enrichments_post(actor_enrichment_meta, async_req=True)
        >>> result = thread.get()

        Args:
            actor_enrichment_meta ([ActorEnrichmentMeta]): The new enrichment meta to add

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ActorEnrichmentMeta
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['actor_enrichment_meta'] = \
            actor_enrichment_meta
        return self.actor_enrichments_post_endpoint.call_with_http_info(**kwargs)

    def actor_enrichments_put(
        self,
        actor_enrichment_meta,
        **kwargs
    ):
        """actor_enrichments_put  # noqa: E501

        Updates actor enrichment meta (after all actors have been added) by providerName, enrichmentName and version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.actor_enrichments_put(actor_enrichment_meta, async_req=True)
        >>> result = thread.get()

        Args:
            actor_enrichment_meta ([ActorEnrichmentMeta]): The new enrichment meta to update

        Keyword Args:
            enrichment_name (str): [optional]
            provider_name (str): [optional]
            version (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ActorEnrichmentMeta
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['actor_enrichment_meta'] = \
            actor_enrichment_meta
        return self.actor_enrichments_put_endpoint.call_with_http_info(**kwargs)

    def actor_id_enrichments_delete(
        self,
        id,
        enrichment_name,
        provider_name,
        version,
        **kwargs
    ):
        """actor_id_enrichments_delete  # noqa: E501

        Delete the enrichments for specific actor by type, providerName and version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.actor_id_enrichments_delete(id, enrichment_name, provider_name, version, async_req=True)
        >>> result = thread.get()

        Args:
            id (str): Actor ID
            enrichment_name (str):
            provider_name (str):
            version (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        kwargs['enrichment_name'] = \
            enrichment_name
        kwargs['provider_name'] = \
            provider_name
        kwargs['version'] = \
            version
        return self.actor_id_enrichments_delete_endpoint.call_with_http_info(**kwargs)

    def actor_id_enrichments_get(
        self,
        id,
        **kwargs
    ):
        """actor_id_enrichments_get  # noqa: E501

        Returns all matched enrichment for the specific actor by type, providerName and version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.actor_id_enrichments_get(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str): Actor ID

        Keyword Args:
            enrichment_name (str): [optional]
            provider_name (str): [optional]
            version (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ActorEnrichment]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.actor_id_enrichments_get_endpoint.call_with_http_info(**kwargs)

    def actor_id_enrichments_post(
        self,
        id,
        actor_enrichment,
        **kwargs
    ):
        """actor_id_enrichments_post  # noqa: E501

        Creates new enrichments for specific message  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.actor_id_enrichments_post(id, actor_enrichment, async_req=True)
        >>> result = thread.get()

        Args:
            id (str): Actor ID
            actor_enrichment ([ActorEnrichment]): The new enrichment to add

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ActorEnrichment]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        kwargs['actor_enrichment'] = \
            actor_enrichment
        return self.actor_id_enrichments_post_endpoint.call_with_http_info(**kwargs)

    def actor_id_enrichments_put(
        self,
        id,
        enrichment_name,
        provider_name,
        version,
        actor_enrichment,
        **kwargs
    ):
        """actor_id_enrichments_put  # noqa: E501

        Update the enrichments for specific actor by type, providerName and version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.actor_id_enrichments_put(id, enrichment_name, provider_name, version, actor_enrichment, async_req=True)
        >>> result = thread.get()

        Args:
            id (str): Message ID
            enrichment_name (str):
            provider_name (str):
            version (str):
            actor_enrichment ([ActorEnrichment]): The new enrichments to update

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ActorEnrichment]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        kwargs['enrichment_name'] = \
            enrichment_name
        kwargs['provider_name'] = \
            provider_name
        kwargs['version'] = \
            version
        kwargs['actor_enrichment'] = \
            actor_enrichment
        return self.actor_id_enrichments_put_endpoint.call_with_http_info(**kwargs)

    def actor_id_get(
        self,
        id,
        **kwargs
    ):
        """actor_id_get  # noqa: E501

        Returns specific actor by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.actor_id_get(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str): Actor ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Actor
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.actor_id_get_endpoint.call_with_http_info(**kwargs)

