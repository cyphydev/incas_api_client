# coding: utf-8

"""
    INCAS TA2-UIUC Datatypes

    This API document is defined based on INCAS Common Datatypes version 0.0.6.  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from uiuc_incas_client.api_client import ApiClient


class GraphApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def actor_actor_graph_id_delete(self, id, **kwargs):  # noqa: E501
        """actor_actor_graph_id_delete  # noqa: E501

        Delete the specific graph by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actor_actor_graph_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Graph ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.actor_actor_graph_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.actor_actor_graph_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def actor_actor_graph_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """actor_actor_graph_id_delete  # noqa: E501

        Delete the specific graph by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actor_actor_graph_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Graph ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actor_actor_graph_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `actor_actor_graph_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/actorActorGraph/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actor_actor_graph_id_get(self, id, **kwargs):  # noqa: E501
        """actor_actor_graph_id_get  # noqa: E501

        Gets specific actor-actor graph information by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actor_actor_graph_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Graph ID (required)
        :return: ActorActorGraph
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.actor_actor_graph_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.actor_actor_graph_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def actor_actor_graph_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """actor_actor_graph_id_get  # noqa: E501

        Gets specific actor-actor graph information by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actor_actor_graph_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Graph ID (required)
        :return: ActorActorGraph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actor_actor_graph_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `actor_actor_graph_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/actorActorGraph/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ActorActorGraph',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actor_actor_graph_id_neighbor_get(self, id, actor_id, **kwargs):  # noqa: E501
        """actor_actor_graph_id_neighbor_get  # noqa: E501

        Gets the neighbors for specific node from specific graph by graph id and actor id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actor_actor_graph_id_neighbor_get(id, actor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Graph ID (required)
        :param str actor_id: (required)
        :return: list[GraphEdge]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.actor_actor_graph_id_neighbor_get_with_http_info(id, actor_id, **kwargs)  # noqa: E501
        else:
            (data) = self.actor_actor_graph_id_neighbor_get_with_http_info(id, actor_id, **kwargs)  # noqa: E501
            return data

    def actor_actor_graph_id_neighbor_get_with_http_info(self, id, actor_id, **kwargs):  # noqa: E501
        """actor_actor_graph_id_neighbor_get  # noqa: E501

        Gets the neighbors for specific node from specific graph by graph id and actor id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actor_actor_graph_id_neighbor_get_with_http_info(id, actor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Graph ID (required)
        :param str actor_id: (required)
        :return: list[GraphEdge]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'actor_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actor_actor_graph_id_neighbor_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `actor_actor_graph_id_neighbor_get`")  # noqa: E501
        # verify the required parameter 'actor_id' is set
        if ('actor_id' not in params or
                params['actor_id'] is None):
            raise ValueError("Missing the required parameter `actor_id` when calling `actor_actor_graph_id_neighbor_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'actor_id' in params:
            query_params.append(('actorId', params['actor_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/actorActorGraph/{id}/neighbor', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GraphEdge]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actor_actor_graph_id_put(self, body, id, **kwargs):  # noqa: E501
        """actor_actor_graph_id_put  # noqa: E501

        Update the specific actor-actor graph by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actor_actor_graph_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActorActorGraph body: The new graph to update (required)
        :param str id: Graph ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.actor_actor_graph_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.actor_actor_graph_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def actor_actor_graph_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """actor_actor_graph_id_put  # noqa: E501

        Update the specific actor-actor graph by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actor_actor_graph_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActorActorGraph body: The new graph to update (required)
        :param str id: Graph ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actor_actor_graph_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `actor_actor_graph_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `actor_actor_graph_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/actorActorGraph/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actor_actor_graph_list_get(self, **kwargs):  # noqa: E501
        """actor_actor_graph_list_get  # noqa: E501

        Gets graph IDs by providing query keys.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actor_actor_graph_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provider_name:
        :param str graph_name:
        :param str distance_name:
        :param str version:
        :param str time_stamp:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.actor_actor_graph_list_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.actor_actor_graph_list_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def actor_actor_graph_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """actor_actor_graph_list_get  # noqa: E501

        Gets graph IDs by providing query keys.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actor_actor_graph_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provider_name:
        :param str graph_name:
        :param str distance_name:
        :param str version:
        :param str time_stamp:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider_name', 'graph_name', 'distance_name', 'version', 'time_stamp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actor_actor_graph_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'provider_name' in params:
            query_params.append(('providerName', params['provider_name']))  # noqa: E501
        if 'graph_name' in params:
            query_params.append(('graphName', params['graph_name']))  # noqa: E501
        if 'distance_name' in params:
            query_params.append(('distanceName', params['distance_name']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'time_stamp' in params:
            query_params.append(('timeStamp', params['time_stamp']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/actorActorGraph/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actor_actor_graph_post(self, body, **kwargs):  # noqa: E501
        """actor_actor_graph_post  # noqa: E501

        Submits a new graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actor_actor_graph_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActorActorGraph body: The new graphs to add (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.actor_actor_graph_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.actor_actor_graph_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def actor_actor_graph_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """actor_actor_graph_post  # noqa: E501

        Submits a new graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actor_actor_graph_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActorActorGraph body: The new graphs to add (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actor_actor_graph_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `actor_actor_graph_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/actorActorGraph', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actor_message_graph_id_delete(self, id, **kwargs):  # noqa: E501
        """actor_message_graph_id_delete  # noqa: E501

        Delete the specific graph by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actor_message_graph_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Graph ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.actor_message_graph_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.actor_message_graph_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def actor_message_graph_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """actor_message_graph_id_delete  # noqa: E501

        Delete the specific graph by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actor_message_graph_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Graph ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actor_message_graph_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `actor_message_graph_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/actorMessageGraph/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actor_message_graph_id_get(self, id, **kwargs):  # noqa: E501
        """actor_message_graph_id_get  # noqa: E501

        Gets specific actor-message graph information by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actor_message_graph_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Graph ID (required)
        :return: ActorMessageGraph
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.actor_message_graph_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.actor_message_graph_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def actor_message_graph_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """actor_message_graph_id_get  # noqa: E501

        Gets specific actor-message graph information by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actor_message_graph_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Graph ID (required)
        :return: ActorMessageGraph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actor_message_graph_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `actor_message_graph_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/actorMessageGraph/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ActorMessageGraph',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actor_message_graph_id_neighbor_get(self, id, **kwargs):  # noqa: E501
        """actor_message_graph_id_neighbor_get  # noqa: E501

        Gets the neighbors for specific node from specific graph by graph id and message or actor id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actor_message_graph_id_neighbor_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Graph ID (required)
        :param str message_id:
        :param str actor_id:
        :return: list[GraphEdge]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.actor_message_graph_id_neighbor_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.actor_message_graph_id_neighbor_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def actor_message_graph_id_neighbor_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """actor_message_graph_id_neighbor_get  # noqa: E501

        Gets the neighbors for specific node from specific graph by graph id and message or actor id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actor_message_graph_id_neighbor_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Graph ID (required)
        :param str message_id:
        :param str actor_id:
        :return: list[GraphEdge]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'message_id', 'actor_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actor_message_graph_id_neighbor_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `actor_message_graph_id_neighbor_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'message_id' in params:
            query_params.append(('messageId', params['message_id']))  # noqa: E501
        if 'actor_id' in params:
            query_params.append(('actorId', params['actor_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/actorMessageGraph/{id}/neighbor', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GraphEdge]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actor_message_graph_id_put(self, body, id, **kwargs):  # noqa: E501
        """actor_message_graph_id_put  # noqa: E501

        Update the specific actor-message graph by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actor_message_graph_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActorMessageGraph body: The new graph to update (required)
        :param str id: Graph ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.actor_message_graph_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.actor_message_graph_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def actor_message_graph_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """actor_message_graph_id_put  # noqa: E501

        Update the specific actor-message graph by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actor_message_graph_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActorMessageGraph body: The new graph to update (required)
        :param str id: Graph ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actor_message_graph_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `actor_message_graph_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `actor_message_graph_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/actorMessageGraph/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actor_message_graph_list_get(self, **kwargs):  # noqa: E501
        """actor_message_graph_list_get  # noqa: E501

        Gets graph IDs by providing query keys.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actor_message_graph_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provider_name:
        :param str graph_name:
        :param str distance_name:
        :param str version:
        :param str time_stamp:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.actor_message_graph_list_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.actor_message_graph_list_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def actor_message_graph_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """actor_message_graph_list_get  # noqa: E501

        Gets graph IDs by providing query keys.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actor_message_graph_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provider_name:
        :param str graph_name:
        :param str distance_name:
        :param str version:
        :param str time_stamp:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider_name', 'graph_name', 'distance_name', 'version', 'time_stamp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actor_message_graph_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'provider_name' in params:
            query_params.append(('providerName', params['provider_name']))  # noqa: E501
        if 'graph_name' in params:
            query_params.append(('graphName', params['graph_name']))  # noqa: E501
        if 'distance_name' in params:
            query_params.append(('distanceName', params['distance_name']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'time_stamp' in params:
            query_params.append(('timeStamp', params['time_stamp']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/actorMessageGraph/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def actor_message_graph_post(self, body, **kwargs):  # noqa: E501
        """actor_message_graph_post  # noqa: E501

        Submits a new graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actor_message_graph_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActorMessageGraph body: The new graphs to add (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.actor_message_graph_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.actor_message_graph_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def actor_message_graph_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """actor_message_graph_post  # noqa: E501

        Submits a new graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.actor_message_graph_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActorMessageGraph body: The new graphs to add (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method actor_message_graph_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `actor_message_graph_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/actorMessageGraph', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_message_graph_id_delete(self, id, **kwargs):  # noqa: E501
        """message_message_graph_id_delete  # noqa: E501

        Delete the specific graph by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_message_graph_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Graph ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_message_graph_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.message_message_graph_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def message_message_graph_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """message_message_graph_id_delete  # noqa: E501

        Delete the specific graph by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_message_graph_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Graph ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_message_graph_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `message_message_graph_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/messageMessageGraph/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_message_graph_id_get(self, id, **kwargs):  # noqa: E501
        """message_message_graph_id_get  # noqa: E501

        Gets specific message-message graph information by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_message_graph_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Graph ID (required)
        :return: MessageMessageGraph
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_message_graph_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.message_message_graph_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def message_message_graph_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """message_message_graph_id_get  # noqa: E501

        Gets specific message-message graph information by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_message_graph_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Graph ID (required)
        :return: MessageMessageGraph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_message_graph_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `message_message_graph_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/messageMessageGraph/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MessageMessageGraph',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_message_graph_id_neighbor_get(self, id, message_id, **kwargs):  # noqa: E501
        """message_message_graph_id_neighbor_get  # noqa: E501

        Gets the neighbors for specific node from specific graph by graph id and message's id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_message_graph_id_neighbor_get(id, message_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Graph ID (required)
        :param str message_id: (required)
        :return: list[GraphEdge]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_message_graph_id_neighbor_get_with_http_info(id, message_id, **kwargs)  # noqa: E501
        else:
            (data) = self.message_message_graph_id_neighbor_get_with_http_info(id, message_id, **kwargs)  # noqa: E501
            return data

    def message_message_graph_id_neighbor_get_with_http_info(self, id, message_id, **kwargs):  # noqa: E501
        """message_message_graph_id_neighbor_get  # noqa: E501

        Gets the neighbors for specific node from specific graph by graph id and message's id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_message_graph_id_neighbor_get_with_http_info(id, message_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Graph ID (required)
        :param str message_id: (required)
        :return: list[GraphEdge]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'message_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_message_graph_id_neighbor_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `message_message_graph_id_neighbor_get`")  # noqa: E501
        # verify the required parameter 'message_id' is set
        if ('message_id' not in params or
                params['message_id'] is None):
            raise ValueError("Missing the required parameter `message_id` when calling `message_message_graph_id_neighbor_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'message_id' in params:
            query_params.append(('messageId', params['message_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/messageMessageGraph/{id}/neighbor', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GraphEdge]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_message_graph_id_put(self, body, id, **kwargs):  # noqa: E501
        """message_message_graph_id_put  # noqa: E501

        Update the specific message-message graph by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_message_graph_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageMessageGraph body: The new graph to update (required)
        :param str id: Graph ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_message_graph_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.message_message_graph_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def message_message_graph_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """message_message_graph_id_put  # noqa: E501

        Update the specific message-message graph by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_message_graph_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageMessageGraph body: The new graph to update (required)
        :param str id: Graph ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_message_graph_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `message_message_graph_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `message_message_graph_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/messageMessageGraph/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_message_graph_list_get(self, **kwargs):  # noqa: E501
        """message_message_graph_list_get  # noqa: E501

        Gets graph IDs by providing query keys.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_message_graph_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provider_name:
        :param str graph_name:
        :param str distance_name:
        :param str version:
        :param str time_stamp:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_message_graph_list_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.message_message_graph_list_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def message_message_graph_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """message_message_graph_list_get  # noqa: E501

        Gets graph IDs by providing query keys.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_message_graph_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provider_name:
        :param str graph_name:
        :param str distance_name:
        :param str version:
        :param str time_stamp:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider_name', 'graph_name', 'distance_name', 'version', 'time_stamp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_message_graph_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'provider_name' in params:
            query_params.append(('providerName', params['provider_name']))  # noqa: E501
        if 'graph_name' in params:
            query_params.append(('graphName', params['graph_name']))  # noqa: E501
        if 'distance_name' in params:
            query_params.append(('distanceName', params['distance_name']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'time_stamp' in params:
            query_params.append(('timeStamp', params['time_stamp']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/messageMessageGraph/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_message_graph_post(self, body, **kwargs):  # noqa: E501
        """message_message_graph_post  # noqa: E501

        Submits a new graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_message_graph_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageMessageGraph body: The new graph to add (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_message_graph_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.message_message_graph_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def message_message_graph_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """message_message_graph_post  # noqa: E501

        Submits a new graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_message_graph_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageMessageGraph body: The new graph to add (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_message_graph_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `message_message_graph_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/messageMessageGraph', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
