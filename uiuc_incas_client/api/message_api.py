# coding: utf-8

"""
    INCAS TA2-UIUC Datatypes

    This API document is defined based on INCAS Common Datatypes version 0.0.6.  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from uiuc_incas_client.api_client import ApiClient


class MessageApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def message_batch_get(self, body, **kwargs):  # noqa: E501
        """message_batch_get  # noqa: E501

        Returns a batch of messages given a list of IDs and specifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_batch_get(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageBatchGetBody body: List of IDs and specifications (required)
        :return: list[UiucMessage]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_batch_get_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.message_batch_get_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def message_batch_get_with_http_info(self, body, **kwargs):  # noqa: E501
        """message_batch_get  # noqa: E501

        Returns a batch of messages given a list of IDs and specifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_batch_get_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageBatchGetBody body: List of IDs and specifications (required)
        :return: list[UiucMessage]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_batch_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `message_batch_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/message/batchGet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UiucMessage]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_count_get(self, media_type, **kwargs):  # noqa: E501
        """message_count_get  # noqa: E501

        Return the number of message IDs available.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_count_get(media_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str media_type: Type of entity to retrieve (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_count_get_with_http_info(media_type, **kwargs)  # noqa: E501
        else:
            (data) = self.message_count_get_with_http_info(media_type, **kwargs)  # noqa: E501
            return data

    def message_count_get_with_http_info(self, media_type, **kwargs):  # noqa: E501
        """message_count_get  # noqa: E501

        Return the number of message IDs available.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_count_get_with_http_info(media_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str media_type: Type of entity to retrieve (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['media_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'media_type' is set
        if ('media_type' not in params or
                params['media_type'] is None):
            raise ValueError("Missing the required parameter `media_type` when calling `message_count_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'media_type' in params:
            query_params.append(('mediaType', params['media_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/message/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_enrichments_batch_delete(self, body, **kwargs):  # noqa: E501
        """message_enrichments_batch_delete  # noqa: E501

        Deletes a batch of enrichments given a list of IDs and specifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_enrichments_batch_delete(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageEnrichmentsBatchDeleteBody body: List of IDs and specifications (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_enrichments_batch_delete_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.message_enrichments_batch_delete_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def message_enrichments_batch_delete_with_http_info(self, body, **kwargs):  # noqa: E501
        """message_enrichments_batch_delete  # noqa: E501

        Deletes a batch of enrichments given a list of IDs and specifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_enrichments_batch_delete_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageEnrichmentsBatchDeleteBody body: List of IDs and specifications (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_enrichments_batch_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `message_enrichments_batch_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/message/enrichments/batchDelete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_enrichments_batch_delete_validate(self, body, **kwargs):  # noqa: E501
        """message_enrichments_batch_delete_validate  # noqa: E501

        Validation endpoint for batch enrichment deletion, successful attempt will return a token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_enrichments_batch_delete_validate(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageEnrichmentsBatchDeleteBody body: List of IDs and specifications (required)
        :return: MessageEnrichmentsBatchValidationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_enrichments_batch_delete_validate_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.message_enrichments_batch_delete_validate_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def message_enrichments_batch_delete_validate_with_http_info(self, body, **kwargs):  # noqa: E501
        """message_enrichments_batch_delete_validate  # noqa: E501

        Validation endpoint for batch enrichment deletion, successful attempt will return a token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_enrichments_batch_delete_validate_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageEnrichmentsBatchDeleteBody body: List of IDs and specifications (required)
        :return: MessageEnrichmentsBatchValidationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_enrichments_batch_delete_validate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `message_enrichments_batch_delete_validate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/message/enrichments/batchDelete/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MessageEnrichmentsBatchValidationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_enrichments_batch_get(self, body, **kwargs):  # noqa: E501
        """message_enrichments_batch_get  # noqa: E501

        Returns a batch of enrichments given a list of IDs and specifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_enrichments_batch_get(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageEnrichmentsBatchGetBody body: List of IDs and specifications (required)
        :return: dict(str, list[MessageEnrichment])
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_enrichments_batch_get_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.message_enrichments_batch_get_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def message_enrichments_batch_get_with_http_info(self, body, **kwargs):  # noqa: E501
        """message_enrichments_batch_get  # noqa: E501

        Returns a batch of enrichments given a list of IDs and specifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_enrichments_batch_get_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageEnrichmentsBatchGetBody body: List of IDs and specifications (required)
        :return: dict(str, list[MessageEnrichment])
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_enrichments_batch_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `message_enrichments_batch_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/message/enrichments/batchGet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, list[MessageEnrichment])',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_enrichments_batch_post(self, body, **kwargs):  # noqa: E501
        """message_enrichments_batch_post  # noqa: E501

        Submits a enrichment for each message ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_enrichments_batch_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, MessageEnrichment) body: Map of IDs and enrichments (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_enrichments_batch_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.message_enrichments_batch_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def message_enrichments_batch_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """message_enrichments_batch_post  # noqa: E501

        Submits a enrichment for each message ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_enrichments_batch_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, MessageEnrichment) body: Map of IDs and enrichments (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_enrichments_batch_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `message_enrichments_batch_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/message/enrichments/batch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_enrichments_batch_post_validate(self, body, **kwargs):  # noqa: E501
        """message_enrichments_batch_post_validate  # noqa: E501

        Validation endpoint for batch enrichment creation, successful attempt will return a token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_enrichments_batch_post_validate(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, MessageEnrichment) body: List of IDs and specifications (required)
        :return: MessageEnrichmentsBatchValidationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_enrichments_batch_post_validate_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.message_enrichments_batch_post_validate_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def message_enrichments_batch_post_validate_with_http_info(self, body, **kwargs):  # noqa: E501
        """message_enrichments_batch_post_validate  # noqa: E501

        Validation endpoint for batch enrichment creation, successful attempt will return a token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_enrichments_batch_post_validate_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, MessageEnrichment) body: List of IDs and specifications (required)
        :return: MessageEnrichmentsBatchValidationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_enrichments_batch_post_validate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `message_enrichments_batch_post_validate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/message/enrichments/batch/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MessageEnrichmentsBatchValidationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_enrichments_batch_put(self, body, **kwargs):  # noqa: E501
        """message_enrichments_batch_put  # noqa: E501

        Updates a enrichment for each message ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_enrichments_batch_put(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, MessageEnrichment) body: Map of IDs and enrichments (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_enrichments_batch_put_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.message_enrichments_batch_put_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def message_enrichments_batch_put_with_http_info(self, body, **kwargs):  # noqa: E501
        """message_enrichments_batch_put  # noqa: E501

        Updates a enrichment for each message ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_enrichments_batch_put_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, MessageEnrichment) body: Map of IDs and enrichments (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_enrichments_batch_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `message_enrichments_batch_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/message/enrichments/batch', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_enrichments_batch_put_validate(self, body, **kwargs):  # noqa: E501
        """message_enrichments_batch_put_validate  # noqa: E501

        Validation endpoint for batch enrichment update, successful attempt will return a token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_enrichments_batch_put_validate(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, MessageEnrichment) body: List of IDs and specifications (required)
        :return: MessageEnrichmentsBatchValidationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_enrichments_batch_put_validate_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.message_enrichments_batch_put_validate_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def message_enrichments_batch_put_validate_with_http_info(self, body, **kwargs):  # noqa: E501
        """message_enrichments_batch_put_validate  # noqa: E501

        Validation endpoint for batch enrichment update, successful attempt will return a token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_enrichments_batch_put_validate_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, MessageEnrichment) body: List of IDs and specifications (required)
        :return: MessageEnrichmentsBatchValidationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_enrichments_batch_put_validate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `message_enrichments_batch_put_validate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/message/enrichments/batch/validate', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MessageEnrichmentsBatchValidationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_enrichments_meta_delete(self, enrichment_name, provider_name, version, **kwargs):  # noqa: E501
        """message_enrichments_meta_delete  # noqa: E501

        Delete specific message enrichment meta by providerName, enrichmentName and version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_enrichments_meta_delete(enrichment_name, provider_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str enrichment_name: (required)
        :param str provider_name: (required)
        :param str version: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_enrichments_meta_delete_with_http_info(enrichment_name, provider_name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.message_enrichments_meta_delete_with_http_info(enrichment_name, provider_name, version, **kwargs)  # noqa: E501
            return data

    def message_enrichments_meta_delete_with_http_info(self, enrichment_name, provider_name, version, **kwargs):  # noqa: E501
        """message_enrichments_meta_delete  # noqa: E501

        Delete specific message enrichment meta by providerName, enrichmentName and version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_enrichments_meta_delete_with_http_info(enrichment_name, provider_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str enrichment_name: (required)
        :param str provider_name: (required)
        :param str version: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enrichment_name', 'provider_name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_enrichments_meta_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enrichment_name' is set
        if ('enrichment_name' not in params or
                params['enrichment_name'] is None):
            raise ValueError("Missing the required parameter `enrichment_name` when calling `message_enrichments_meta_delete`")  # noqa: E501
        # verify the required parameter 'provider_name' is set
        if ('provider_name' not in params or
                params['provider_name'] is None):
            raise ValueError("Missing the required parameter `provider_name` when calling `message_enrichments_meta_delete`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `message_enrichments_meta_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'enrichment_name' in params:
            query_params.append(('enrichmentName', params['enrichment_name']))  # noqa: E501
        if 'provider_name' in params:
            query_params.append(('providerName', params['provider_name']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/message/enrichments/meta', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_enrichments_meta_get(self, **kwargs):  # noqa: E501
        """message_enrichments_meta_get  # noqa: E501

        Returns current message enrichment metas by providerName, enrichmentName and version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_enrichments_meta_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str enrichment_name:
        :param str provider_name:
        :param str version:
        :return: list[MessageEnrichmentMeta]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_enrichments_meta_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.message_enrichments_meta_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def message_enrichments_meta_get_with_http_info(self, **kwargs):  # noqa: E501
        """message_enrichments_meta_get  # noqa: E501

        Returns current message enrichment metas by providerName, enrichmentName and version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_enrichments_meta_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str enrichment_name:
        :param str provider_name:
        :param str version:
        :return: list[MessageEnrichmentMeta]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enrichment_name', 'provider_name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_enrichments_meta_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'enrichment_name' in params:
            query_params.append(('enrichmentName', params['enrichment_name']))  # noqa: E501
        if 'provider_name' in params:
            query_params.append(('providerName', params['provider_name']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/message/enrichments/meta', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MessageEnrichmentMeta]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_enrichments_meta_post(self, body, **kwargs):  # noqa: E501
        """message_enrichments_meta_post  # noqa: E501

        Submits a message enrichment meta (post after all messages have been added).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_enrichments_meta_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageEnrichmentMeta body: The new enrichment meta to add (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_enrichments_meta_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.message_enrichments_meta_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def message_enrichments_meta_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """message_enrichments_meta_post  # noqa: E501

        Submits a message enrichment meta (post after all messages have been added).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_enrichments_meta_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageEnrichmentMeta body: The new enrichment meta to add (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_enrichments_meta_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `message_enrichments_meta_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/message/enrichments/meta', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_enrichments_meta_put(self, body, **kwargs):  # noqa: E501
        """message_enrichments_meta_put  # noqa: E501

        Updates message enrichment meta (after all messages have been added) by providerName, enrichmentName and version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_enrichments_meta_put(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageEnrichmentMeta body: The new enrichment meta to update (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_enrichments_meta_put_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.message_enrichments_meta_put_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def message_enrichments_meta_put_with_http_info(self, body, **kwargs):  # noqa: E501
        """message_enrichments_meta_put  # noqa: E501

        Updates message enrichment meta (after all messages have been added) by providerName, enrichmentName and version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_enrichments_meta_put_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageEnrichmentMeta body: The new enrichment meta to update (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_enrichments_meta_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `message_enrichments_meta_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/message/enrichments/meta', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_id_enrichments_delete(self, id, enrichment_name, provider_name, version, **kwargs):  # noqa: E501
        """message_id_enrichments_delete  # noqa: E501

        Delete a enrichment for specific message by type, providerName and version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_id_enrichments_delete(id, enrichment_name, provider_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Message ID (required)
        :param str enrichment_name: (required)
        :param str provider_name: (required)
        :param str version: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_id_enrichments_delete_with_http_info(id, enrichment_name, provider_name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.message_id_enrichments_delete_with_http_info(id, enrichment_name, provider_name, version, **kwargs)  # noqa: E501
            return data

    def message_id_enrichments_delete_with_http_info(self, id, enrichment_name, provider_name, version, **kwargs):  # noqa: E501
        """message_id_enrichments_delete  # noqa: E501

        Delete a enrichment for specific message by type, providerName and version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_id_enrichments_delete_with_http_info(id, enrichment_name, provider_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Message ID (required)
        :param str enrichment_name: (required)
        :param str provider_name: (required)
        :param str version: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'enrichment_name', 'provider_name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_id_enrichments_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `message_id_enrichments_delete`")  # noqa: E501
        # verify the required parameter 'enrichment_name' is set
        if ('enrichment_name' not in params or
                params['enrichment_name'] is None):
            raise ValueError("Missing the required parameter `enrichment_name` when calling `message_id_enrichments_delete`")  # noqa: E501
        # verify the required parameter 'provider_name' is set
        if ('provider_name' not in params or
                params['provider_name'] is None):
            raise ValueError("Missing the required parameter `provider_name` when calling `message_id_enrichments_delete`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `message_id_enrichments_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'enrichment_name' in params:
            query_params.append(('enrichmentName', params['enrichment_name']))  # noqa: E501
        if 'provider_name' in params:
            query_params.append(('providerName', params['provider_name']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/message/{id}/enrichments', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_id_enrichments_get(self, id, **kwargs):  # noqa: E501
        """message_id_enrichments_get  # noqa: E501

        Returns all visible matched enrichment for the specific message by type, providerName and version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_id_enrichments_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Message ID (required)
        :param str enrichment_name:
        :param str provider_name:
        :param str version:
        :param bool dev:
        :return: list[MessageEnrichment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_id_enrichments_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.message_id_enrichments_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def message_id_enrichments_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """message_id_enrichments_get  # noqa: E501

        Returns all visible matched enrichment for the specific message by type, providerName and version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_id_enrichments_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Message ID (required)
        :param str enrichment_name:
        :param str provider_name:
        :param str version:
        :param bool dev:
        :return: list[MessageEnrichment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'enrichment_name', 'provider_name', 'version', 'dev']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_id_enrichments_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `message_id_enrichments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'enrichment_name' in params:
            query_params.append(('enrichmentName', params['enrichment_name']))  # noqa: E501
        if 'provider_name' in params:
            query_params.append(('providerName', params['provider_name']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'dev' in params:
            query_params.append(('dev', params['dev']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/message/{id}/enrichments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MessageEnrichment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_id_enrichments_post(self, body, id, **kwargs):  # noqa: E501
        """message_id_enrichments_post  # noqa: E501

        Submits a new enrichment for specific message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_id_enrichments_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageEnrichment body: The new enrichment to add (required)
        :param str id: Message ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_id_enrichments_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.message_id_enrichments_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def message_id_enrichments_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """message_id_enrichments_post  # noqa: E501

        Submits a new enrichment for specific message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_id_enrichments_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageEnrichment body: The new enrichment to add (required)
        :param str id: Message ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_id_enrichments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `message_id_enrichments_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `message_id_enrichments_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/message/{id}/enrichments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_id_enrichments_put(self, body, id, **kwargs):  # noqa: E501
        """message_id_enrichments_put  # noqa: E501

        Update a enrichment for specific message by type, providerName and version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_id_enrichments_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageEnrichment body: The new enrichments to update (required)
        :param str id: Message ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_id_enrichments_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.message_id_enrichments_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def message_id_enrichments_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """message_id_enrichments_put  # noqa: E501

        Update a enrichment for specific message by type, providerName and version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_id_enrichments_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageEnrichment body: The new enrichments to update (required)
        :param str id: Message ID (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_id_enrichments_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `message_id_enrichments_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `message_id_enrichments_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/message/{id}/enrichments', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_id_get(self, id, **kwargs):  # noqa: E501
        """message_id_get  # noqa: E501

        Returns specific message by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Message ID (required)
        :param bool with_enrichment: Whether to retrieve enrichments
        :param str enrichment_name:
        :param str provider_name:
        :param str version:
        :param bool dev:
        :return: UiucMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.message_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def message_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """message_id_get  # noqa: E501

        Returns specific message by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Message ID (required)
        :param bool with_enrichment: Whether to retrieve enrichments
        :param str enrichment_name:
        :param str provider_name:
        :param str version:
        :param bool dev:
        :return: UiucMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'with_enrichment', 'enrichment_name', 'provider_name', 'version', 'dev']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `message_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'with_enrichment' in params:
            query_params.append(('withEnrichment', params['with_enrichment']))  # noqa: E501
        if 'enrichment_name' in params:
            query_params.append(('enrichmentName', params['enrichment_name']))  # noqa: E501
        if 'provider_name' in params:
            query_params.append(('providerName', params['provider_name']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'dev' in params:
            query_params.append(('dev', params['dev']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/message/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UiucMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def message_list_get(self, begin, end, media_type, **kwargs):  # noqa: E501
        """message_list_get  # noqa: E501

        Return list of message IDs available in [begin, end).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_list_get(begin, end, media_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int begin: Begin (required)
        :param int end: End (required)
        :param str media_type: Type of entity to retrieve (required)
        :return: list[MessageIdResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.message_list_get_with_http_info(begin, end, media_type, **kwargs)  # noqa: E501
        else:
            (data) = self.message_list_get_with_http_info(begin, end, media_type, **kwargs)  # noqa: E501
            return data

    def message_list_get_with_http_info(self, begin, end, media_type, **kwargs):  # noqa: E501
        """message_list_get  # noqa: E501

        Return list of message IDs available in [begin, end).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.message_list_get_with_http_info(begin, end, media_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int begin: Begin (required)
        :param int end: End (required)
        :param str media_type: Type of entity to retrieve (required)
        :return: list[MessageIdResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['begin', 'end', 'media_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method message_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'begin' is set
        if ('begin' not in params or
                params['begin'] is None):
            raise ValueError("Missing the required parameter `begin` when calling `message_list_get`")  # noqa: E501
        # verify the required parameter 'end' is set
        if ('end' not in params or
                params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `message_list_get`")  # noqa: E501
        # verify the required parameter 'media_type' is set
        if ('media_type' not in params or
                params['media_type'] is None):
            raise ValueError("Missing the required parameter `media_type` when calling `message_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'begin' in params:
            query_params.append(('begin', params['begin']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'media_type' in params:
            query_params.append(('mediaType', params['media_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/message/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MessageIdResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
